% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ctgPHYLset-methods.R
\name{ctgPHYLset-methods}
\alias{ctgPHYLset-methods}
\alias{cellscapeData}
\alias{ctgPHYLset,ANY,ANY-method}
\alias{cellscapeData<-}
\alias{timescapeData}
\alias{timescapeData<-}
\alias{mapscapeData}
\alias{mapscapeData<-}
\alias{treeList}
\alias{treeList<-}
\alias{originalTrees}
\alias{originalTrees<-}
\title{Methods for the ctgPHYLset class}
\usage{
cellscapeData(cs)

cellscapeData(cs, pt) <- value

timescapeData(cs)

timescapeData(cs, pt) <- value

mapscapeData(cs)

mapscapeData(cs, pt) <- value

treeList(cs)

treeList(cs, tt) <- value

originalTrees(cs)

originalTrees(cs, tt) <- value
}
\arguments{
\item{cs}{A ctgPHYLset object}

\item{pt}{The name of the \pkg{cellscape}, \pkg{timescape}, or
\pkg{mapscape} parameter to store}

\item{value}{\code{cellscapeData(cs, pt)<-}: The value to use as a named parameter for
cellscape, used by \code{generate_tree(treeType = "cellscape")} in the
\pkg{cellTreeGenerator} workflow

\code{timescapeData(cs, pt)<-}: The value to use as a named parameter for
timescape used by \code{generate_tree(treeType = "timescape")} in the
\pkg{cellTreeGenerator} workflow

\code{mapscapeData(cs)<-}: The value to use as a named parameter for
mapscape, used by \code{generate_tree(treeType = "mapscape")} in the
\pkg{cellTreeGenerator} workflow}

\item{tt}{The type of tree being stored}
}
\value{
An updated ctgPHYLset object, or the contents of a slot of the
ctgPHYLset object
}
\description{
These methods operate on ctgPHYLset objects. Please note that
treeList<- and originalTrees<- are not exported and not intended to be
called directly.
}
\examples{
# load data for 'treeType = cellscape'
cs_tree_edges <- read.csv(system.file("extdata", "cnv_tree_edges.csv",
                         package = "cellscape"))
cs_cnv_data <- read.csv(system.file("extdata", "cnv_data.csv",
                                     package = "cellscape"))
cs_sc_annot <- read.csv(system.file("extdata", "cnv_annots.tsv",
                                    package = "cellscape"), sep="\t")
cs_clone_colours <- data.frame(clone_id = c("1","2","3"),
                               colour = c("7fc97f", "beaed4", "fdc086"))

# create example ctgPHYLset and load data into it
ctgPHYLset <- newctgPHYLset()
cellscapeData(ctgPHYLset, "clone_colours") <- cs_clone_colours
cellscapeData(ctgPHYLset, "tree_edges") <- cs_tree_edges
cellscapeData(ctgPHYLset, "cnv_data") <- cs_cnv_data
cellscapeData(ctgPHYLset, "sc_annot") <- cs_sc_annot

# run generate_tree()
ctgPHYLset <- generate_tree(dataSet = ctgPHYLset, treeType = "cellscape")

trees <- treeList(ctgPHYLset)
originalTrees <- originalTrees(ctgPHYLset)
}
\keyword{internal}
